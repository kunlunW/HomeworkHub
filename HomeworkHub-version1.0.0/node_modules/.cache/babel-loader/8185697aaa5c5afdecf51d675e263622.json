{"ast":null,"code":"var _jsxFileName = \"/Users/kunlunwang/Documents/GitHub/HomeworkHub/HomeworkHub-version1.0.0/src/views/Table2.js\";\nimport React, { Component } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport ToolkitProvider, { CSVExport } from \"react-bootstrap-table2-toolkit\"; // import \"./App.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  ExportCSVButton\n} = CSVExport;\nconst pricesData = [{\n  id: \"1\",\n  HW: \"English\",\n  price: \"10\"\n}, {\n  id: \"2\",\n  HW: \"Math\",\n  price: \"20\"\n}, {\n  id: \"3\",\n  HW: \"Spelling\",\n  price: \"15\"\n}];\n\nclass Table2 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.prices = action => {\n      if (!action) {\n        return this.state.data;\n      } else {\n        switch (action.actionType) {\n          case \"addRow\":\n            let newRow = {};\n            newRow.id = this.state.data.length + 1;\n            newRow.HW = \" \";\n            newRow.price = \" \";\n            this.setState({\n              data: [...this.state.data, newRow]\n            });\n            return this.state.data;\n\n          case \"deleteRow\":\n            //this delets different rows only\n            let new_state = this.state.data.filter(row => row.id !== action.row || row.HW !== action.HW);\n            this.setState({\n              data: [...new_state]\n            });\n            return this.state.data;\n\n          default:\n            return this.state.data;\n        }\n      }\n    };\n\n    this.state = {\n      data: [...pricesData]\n    };\n    this.prices = this.prices.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(RenderExpenseTable, {\n        data: this.state.data,\n        prices: this.prices\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass RenderExpenseTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [...this.props.data]\n    };\n  }\n\n  componentWillMount() {\n    if (!this.state.data.length) {\n      this.setState({\n        data: [...this.props.prices({\n          action: \"data\"\n        })]\n      });\n    }\n  }\n\n  render() {\n    let tableData = this.state.data;\n\n    if (JSON.stringify(this.props.data) === JSON.stringify(tableData)) {\n      console.log(\"in rendered table components the new data is: updated \");\n    } else {\n      console.log(\"in rendered table components the new data is: not updated \");\n      tableData = this.props.data;\n    }\n\n    const columns = [{\n      dataField: \"id\",\n      text: \"Id\",\n      sort: true\n    }, {\n      dataField: \"HW\",\n      text: \"HW Name\",\n      sort: true\n    }, {\n      dataField: \"price\",\n      text: \"Due dates\",\n      sort: true\n    }, {\n      dataField: \"databasePkey\",\n      text: \"Action\",\n      editable: false,\n      formatter: (cell, row) => {\n        if (row) return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger btn-xs rounded\",\n          onClick: () => {\n            this.setState(this.state.data, () => {\n              this.props.prices({\n                actionType: \"deleteRow\",\n                row: row.id,\n                HW: row.HW\n              });\n            });\n          },\n          children: \"Delete Row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this);\n        return null;\n      }\n    }];\n    const defaultSorted = [{\n      dataField: \"HW\",\n      order: \"desc\"\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      xs: 12,\n      className: \"col form\",\n      children: /*#__PURE__*/_jsxDEV(ToolkitProvider, {\n        keyField: \"id\",\n        data: tableData,\n        columns: columns,\n        exportCSV: true,\n        children: props => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-around p-2\",\n            children: [/*#__PURE__*/_jsxDEV(ExportCSVButton, {\n              className: \"text-light btn bg-success border-secondary rounded\",\n              ...props.csvProps,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Export CSV\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn bg-success text-light rounded\",\n              onClick: () => this.setState(tableData, () => {\n                this.props.prices({\n                  actionType: \"addRow\"\n                });\n              }),\n              children: \"Add HW\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(BootstrapTable, { ...props.baseProps,\n            keyField: \"id\",\n            data: tableData,\n            defaultSorted: defaultSorted,\n            columns: columns,\n            cellEdit: cellEditFactory({\n              mode: \"click\",\n              blurToSave: true,\n              onStartEdit: (row, column, rowIndex, columnIndex) => {},\n              beforeSaveCell: (oldValue, newValue, row, column) => {\n                if (column.dataField === \"price\") {\n                  if (isNaN(Number(newValue))) {\n                    alert(\"You entered \" + newValue + \" Please Enter numbers Only!!\");\n                  }\n                }\n              },\n              afterSaveCell: (oldValue, newValue, row, column) => {}\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Table2;","map":{"version":3,"sources":["/Users/kunlunwang/Documents/GitHub/HomeworkHub/HomeworkHub-version1.0.0/src/views/Table2.js"],"names":["React","Component","BootstrapTable","cellEditFactory","ToolkitProvider","CSVExport","ExportCSVButton","pricesData","id","HW","price","Table2","constructor","props","prices","action","state","data","actionType","newRow","length","setState","new_state","filter","row","bind","render","RenderExpenseTable","componentWillMount","tableData","JSON","stringify","console","log","columns","dataField","text","sort","editable","formatter","cell","defaultSorted","order","csvProps","baseProps","mode","blurToSave","onStartEdit","column","rowIndex","columnIndex","beforeSaveCell","oldValue","newValue","isNaN","Number","alert","afterSaveCell"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport ToolkitProvider, { CSVExport } from \"react-bootstrap-table2-toolkit\";\n// import \"./App.css\";\n\nconst { ExportCSVButton } = CSVExport;\nconst pricesData = [\n  { id: \"1\", HW: \"English\", price: \"10\" },\n  { id: \"2\", HW: \"Math\", price: \"20\" },\n  { id: \"3\", HW: \"Spelling\", price: \"15\" }\n];\n\nclass Table2 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [...pricesData]\n    };\n    this.prices = this.prices.bind(this);\n  }\n\n  prices = action => {\n    if (!action) {\n      return this.state.data;\n    } else {\n      switch (action.actionType) {\n        case \"addRow\":\n          let newRow = {};\n          newRow.id = this.state.data.length + 1;\n          newRow.HW = \" \";\n          newRow.price = \" \";\n          this.setState({ data: [...this.state.data, newRow] });\n\n          return this.state.data;\n        case \"deleteRow\":\n          //this delets different rows only\n          let new_state = this.state.data.filter(\n            row => row.id !== action.row || row.HW !== action.HW\n          );\n\n          this.setState({ data: [...new_state] });\n          return this.state.data;\n        default:\n          return this.state.data;\n      }\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <RenderExpenseTable data={this.state.data} prices={this.prices} />\n      </div>\n    );\n  }\n}\n\nclass RenderExpenseTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: [...this.props.data] };\n  }\n  componentWillMount() {\n    if (!this.state.data.length) {\n      this.setState({ data: [...this.props.prices({ action: \"data\" })] });\n    }\n  }\n\n  render() {\n    let tableData = this.state.data;\n    if (JSON.stringify(this.props.data) === JSON.stringify(tableData)) {\n      console.log(\"in rendered table components the new data is: updated \");\n    } else {\n      console.log(\"in rendered table components the new data is: not updated \");\n      tableData = this.props.data;\n    }\n    const columns = [\n      {\n        dataField: \"id\",\n        text: \"Id\",\n        sort: true\n      },\n      {\n        dataField: \"HW\",\n        text: \"HW Name\",\n        sort: true\n      },\n      {\n        dataField: \"price\",\n        text: \"Due dates\",\n        sort: true\n      },\n      {\n        dataField: \"databasePkey\",\n        text: \"Action\",\n        editable: false,\n        formatter: (cell, row) => {\n          if (row)\n            return (\n              <button\n                className=\"btn btn-danger btn-xs rounded\"\n                onClick={() => {\n                  this.setState(this.state.data, () => {\n                    this.props.prices({\n                      actionType: \"deleteRow\",\n                      row: row.id,\n                      HW: row.HW\n                    });\n                  });\n                }}\n              >\n                Delete Row\n              </button>\n            );\n          return null;\n        }\n      }\n    ];\n\n    const defaultSorted = [\n        {\n          dataField: \"HW\",\n          order: \"desc\"\n        }\n      ];\n\n\n\n    return (\n      <div xs={12} className=\"col form\">\n        <ToolkitProvider\n          keyField=\"id\"\n          data={tableData}\n          columns={columns}\n          exportCSV\n        >\n          {props => (\n            <div>\n              <div className=\"d-flex justify-content-around p-2\">\n                <ExportCSVButton\n                  className=\"text-light btn bg-success border-secondary rounded\"\n                  {...props.csvProps}\n                >\n                  <span>Export CSV</span>\n                </ExportCSVButton>\n\n                <button\n                  className=\"btn bg-success text-light rounded\"\n                  onClick={() =>\n                    this.setState(tableData, () => {\n                      this.props.prices({ actionType: \"addRow\" });\n                    })\n                  }\n                >\n                  Add HW\n                </button>\n              </div>\n              <BootstrapTable\n                {...props.baseProps}\n                keyField=\"id\"\n                data={tableData}\n                defaultSorted={defaultSorted}\n                columns={columns}\n                cellEdit={cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  onStartEdit: (row, column, rowIndex, columnIndex) => {},\n                  beforeSaveCell: (oldValue, newValue, row, column) => {\n                    if (column.dataField === \"price\") {\n                      if (isNaN(Number(newValue))) {\n                        alert(\n                          \"You entered \" +\n                            newValue +\n                            \" Please Enter numbers Only!!\"\n                        );\n                      }\n                    }\n                  },\n                  afterSaveCell: (oldValue, newValue, row, column) => {}\n                })}\n              />\n            </div>\n          )}\n        </ToolkitProvider>\n      </div>\n    );\n  }\n}\n\nexport default Table2;\n"]},"metadata":{},"sourceType":"module"}